#!/usr/bin/env node

/**
 * Module dependencies
 */
const app = require('../app')
const http = require('http')
const v8Profiler = require('v8-profiler-next');
const fs = require('fs');

/**
 * Get port from environment and store in Express
 */
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Take CPU Profile
 */
const title = 'contentful';
// example 5 mins cpu profile
console.log('Start profiling on app ' + title);
v8Profiler.startProfiling(title, true);
setTimeout(() => {
  const profile = v8Profiler.stopProfiling(title);
  profile.export(function (error, result) {
    fs.writeFileSync(`${title}.cpuprofile`, result);
    console.log('Stop profiling on app ' + title);
    profile.delete();
  });
}, 1 * 60 * 1000);

/**
 * Create HTTP server
 */
const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces
 */
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false
 */
function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // Named pipe
    return val
  }

  if (port >= 0) {
    // Port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event
 */
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event
 */
function onListening () {
  const addr = server.address()
  const uri = typeof addr === 'string' ? addr : `http://localhost:${addr.port}`
  console.log(`Listening on ${uri}`)
}
